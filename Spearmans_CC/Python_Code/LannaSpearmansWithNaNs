#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 16 20:10:23 2017

@author: alannamnolan
"""

class PairedGene(object):
    def __init__(self):
        self.stats = stats
        
from random import randint
from scipy import stats
import pandas as pd
import math

print('I will calculate spearmans cc for you!')
print()
print('Please note, data sheet must have titles in the first row and first column!')
print()
sheet = input('Please enter the name of the data sheet, followed by the extension: ')
df = pd.read_excel("SampleData.xls", "Sheet1")
cols = [i for i in range(len(df.columns))]
df.iloc[:,1:] = df.iloc[:,1:].apply(pd.to_numeric, errors='coerce').values

print(df)

print('Would you like to calculate one pair of genes or all pairs in the data set?')
calctype = input('Please type one for one pair and all for all pairs: ')

#get random pair numbers from user

#create a dictionary to maintain info on what genes have been used
genesUsed = {}
calculatedGenes = []

if calctype == 'all':
    i = 0
    while i < len(df):
        j = 0
        while j < len(df):
            gene1 = df.loc[i]
            print(gene1)
            gene2 = df.loc[j]
            print(gene2)
            if gene1[0]+ gene2[0] not in genesUsed:
                if gene1[0] != gene2[0]:
                    k = 1
                    gene1a = list(gene1)
                    gene2a = list(gene2)
                    while k < len(gene1):
                        if math.isnan(float(gene1[k])) == True or math.isnan(float(gene2[k])) == True:
                            gene1a[k] = math.nan
                            gene2a[k] = math.nan
                        k += 1
                    pairedGene = PairedGene()
                    pairedGene.stats = stats.spearmanr(gene1a[1:len(gene1a)], gene2a[1:len(gene2a)], nan_policy = 'omit')
                    print(pairedGene.stats)
                    genesUsed.update ({gene1a[0]+ gene2a[0] : pairedGene.stats})
                    calculatedGenes.append(pairedGene)
            j += 1
        i += 1
        
elif calctype == 'one':
    done = 'no'
    while done == 'no':
        gene1name = input('Please enter the name of gene 1: ')
        gene2name = input('Please enter the name of gene 2: ')
        i = 0
        gene1 = None
        gene2 = None
        while i != len(df):
            newgene = df.loc[i]
            if gene1name == newgene[0]:
                gene1 = df.loc[i]
            elif gene2name == newgene[0]:
                gene2 = df.loc[i]
            
            if gene1 is not None and gene2 is not None:
                k = 1
                gene1a = list(gene1)
                gene2a = list(gene2)
                while k < len(gene1):
                    if math.isnan(float(gene1[k])) == True or math.isnan(float(gene2[k])) == True:
                            gene1a[k] = math.nan
                            gene2a[k] = math.nan
                    k += 1
                pairedGene = PairedGene()
                pairedGene.stats = stats.spearmanr(gene1a[1:len(gene1a)], gene2a[1:len(gene2a)], nan_policy = 'omit')
                print(pairedGene.stats)
                calculatedGenes.append(pairedGene)
                break;
            i += 1
        print()
        print('Are you done calculating gene pairs?')
        done = input('Enter yes or no: ')
    
    
else:
    print('Incorrect input, please try again!')

print('Program finished!')
print(genesUsed)
print(calculatedGenes)

df = pd.DataFrame(genesUsed)
writer = pd.ExcelWriter('pandas_simple.xlsx', engine = 'xlsxwriter')
df.to_excel(writer, sheet_name='Sheet1')
writer.save()

for gene in calculatedGenes:
    print(gene.stats)
